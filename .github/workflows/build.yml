name: Build DevBuild
on:
    push:
        branches:
            - main
        paths:
            - .github/workflows/build.yml
            - src/**
            - browser/**
            - scripts/build/**
            - package.json
            - pnpm-lock.yaml
    workflow_dispatch:

permissions:
    contents: write

env:
    FORCE_COLOR: true

jobs:
    Build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - uses: pnpm/action-setup@v3

            - name: Use Node.js 20
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build web
              run: pnpm buildWebStandalone

            - name: Build
              run: pnpm build --standalone

            - name: Generate plugin list
              run: pnpm generatePluginJson dist/plugins.json dist/plugin-readmes.json

            - name: Clean up obsolete files
              run: |
                  rm -rf dist/*-unpacked dist/vendor Vencord.user.css vencordDesktopRenderer.css vencordDesktopRenderer.css.map

            - name: Get some values needed for the release
              id: release_values
              run: |
                  echo "release_tag=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

            - name: Upload DevBuild as release
              run: |
                  set -e

                  # Check if files exist
                  if [ ! -d "dist" ] || [ -z "$(ls -A dist 2>/dev/null)" ]; then
                      echo "Error: dist directory is empty or doesn't exist"
                      exit 1
                  fi

                  # Create release if it doesn't exist
                  if ! gh release view devbuild >/dev/null 2>&1; then
                      echo "Creating new release: devbuild"
                      gh release create devbuild --title "DevBuild $release_tag" --notes "Development build from commit $release_tag" --draft
                  else
                      echo "Release devbuild already exists, updating..."
                  fi

                  # Upload all files from dist directory
                  echo "Uploading files from dist directory..."
                  for file in dist/*; do
                      if [ -f "$file" ]; then
                          echo "Uploading: $file"
                          gh release upload devbuild "$file" --clobber
                      fi
                  done

                  # Update release title and publish
                  gh release edit devbuild --title "DevBuild $release_tag" --notes "Development build from commit $release_tag" --draft=false
                  echo "Release published successfully!"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  release_tag: ${{ env.release_tag }}
